break
} else exitLoop <- FALSE
sigma[,,j] <- out$sigma
omega[,,j] <- out$omega
graph[,,j] <- out$graph
occam[[j]] <- out$occam   # keep the edges in the window for the next EM iteration
critOut[j] <- out$crit
} # for j in 1:K
out
sigma
graph
#### E step ............................................
e <- estepmggm(data, t(mu), sigma, pro)
z <- e$z
loglik <- e$loglik
### loglikelihood.......................................
llk <- loglik             # BIC is computed using MAP estimates in loglikelihood
#
if ( regularize ) {
nu <- regHyperPar$psi
logPrior <- rep(NA, K)
for ( j in 1:K ) {
# inverse Wishart log density  --- MCMCpack
multGamma <- sum( lgamma((nu + 1 - 1:V)/2) )
lDenom <- multGamma + 0.5*nu*V*log(2) + 0.25*V*(V - 1)*log(pi)
cholS <- chol(sigma[,,j])
cholW <- cholScale
halflogdetS <- sum( log(diag(cholS)) )
halflogdetW <- sum( log(diag(cholW)) )
invS <- chol2inv( cholS )
exptrace <- sum(Scale * invS)
lNum <- nu*halflogdetW - (nu + V + 1) * halflogdetS - 0.5 * exptrace
logPrior[j] <- lNum - lDenom
}
loglik <- loglik + sum(logPrior)
}
nCov <- sum(graph)/2      # number of covariance parameters
penVal <- sum( vapply( 1:K, function(k) penalty(graph[,,k], beta = beta), numeric(1) ) )
loglikPen <- loglik + penVal
# update the Start......................................
# temp <- ifelse(sigma != 0, 1, 0)
# temp <- apply( temp, 3, function(a) replace(a, cbind(1:M, 1:M), 0) )
Start <- graph
firstIt <- FALSE
#### check
err <- abs(loglikPen - loglikPenPrev) / (1 + abs(loglikPen))
loglikPenPrev <- loglikPen
iter <- iter + 1
# use loading bar
crit <- ( err > tol & iter < itMax )
crit
#### M step ............................................
temp <- mclust::covw(data, z, normalize = FALSE)
dimnames(temp$S) <- list(varnames, varnames)
mu <- temp$mean
pro <- colMeans(z)
for ( j in 1:K ) {
if ( firstIt ) START <- NULL else {
START <- structure(Start[,,j], critOut = critOut[j], sigma = sigma[,,j])
}
Nj <- pro[j]*N
if ( regularize ) {
Sj <- Scale + Nj*temp$S[,,j]
Sj <- Sj / ( Nj + V + 1 + regHyperPar$psi )
} else {
Sj <- temp$S[,,j]
}
out <- switch(search,
"step-forw" = try(
mggm:::searchGGMStepwise_f(S = Sj, N = N, model = model, pro = Nj/N, start = START,
penalty = penalty, beta = beta,
regularize = regularize, regHyperPar = regHyperPar,
ctrlStep = ctrlStep, ctrlIcf = ctrlIcf, parallel = parallel,
verbose = FALSE,
occam = occam[[j]]),
silent = !ctrlEm$printMsg),
#
"step-back" = try(
mggm:::searchGGMStepwise_b(S = Sj, N = N, model = model, pro = Nj/N, start = START,
penalty = penalty, beta = beta,
regularize = regularize, regHyperPar = regHyperPar,
ctrlStep = ctrlStep, ctrlIcf = ctrlIcf, parallel = parallel,
verbose = FALSE,
occam = occam[[j]]),
silent = !ctrlEm$printMsg),
#
"ga" = try(
mggm:::searchGGMGA(S = Sj, N = N, model = model, pro = Nj/N, start = START,
penalty = penalty, beta = beta,
regularize = regularize, regHyperPar = regHyperPar,
ctrlGa = ctrlGa, ctrlIcf = ctrlIcf, parallel = parallel,
verbose = FALSE),
silent = !ctrlEm$printMsg)
)
if ( class(out) == "try-error" ) {
exitLoop <- TRUE
break
} else exitLoop <- FALSE
sigma[,,j] <- out$sigma
omega[,,j] <- out$omega
graph[,,j] <- out$graph
occam[[j]] <- out$occam   # keep the edges in the window for the next EM iteration
critOut[j] <- out$crit
} # for j in 1:K
out
j
(data, t(mu), sigma, pro)
#### E step ............................................
e <- estepmggm(data, t(mu), sigma, pro)
z <- e$z
loglik <- e$loglik
### loglikelihood.......................................
llk <- loglik             # BIC is computed using MAP estimates in loglikelihood
#
if ( regularize ) {
nu <- regHyperPar$psi
logPrior <- rep(NA, K)
for ( j in 1:K ) {
# inverse Wishart log density  --- MCMCpack
multGamma <- sum( lgamma((nu + 1 - 1:V)/2) )
lDenom <- multGamma + 0.5*nu*V*log(2) + 0.25*V*(V - 1)*log(pi)
cholS <- chol(sigma[,,j])
cholW <- cholScale
halflogdetS <- sum( log(diag(cholS)) )
halflogdetW <- sum( log(diag(cholW)) )
invS <- chol2inv( cholS )
exptrace <- sum(Scale * invS)
lNum <- nu*halflogdetW - (nu + V + 1) * halflogdetS - 0.5 * exptrace
logPrior[j] <- lNum - lDenom
}
loglik <- loglik + sum(logPrior)
}
nCov <- sum(graph)/2      # number of covariance parameters
penVal <- sum( vapply( 1:K, function(k) penalty(graph[,,k], beta = beta), numeric(1) ) )
loglikPen <- loglik + penVal
# update the Start......................................
# temp <- ifelse(sigma != 0, 1, 0)
# temp <- apply( temp, 3, function(a) replace(a, cbind(1:M, 1:M), 0) )
Start <- graph
firstIt <- FALSE
#### check
err <- abs(loglikPen - loglikPenPrev) / (1 + abs(loglikPen))
loglikPenPrev <- loglikPen
iter <- iter + 1
err
#### M step ............................................
temp <- mclust::covw(data, z, normalize = FALSE)
dimnames(temp$S) <- list(varnames, varnames)
mu <- temp$mean
pro <- colMeans(z)
for ( j in 1:K ) {
if ( firstIt ) START <- NULL else {
START <- structure(Start[,,j], critOut = critOut[j], sigma = sigma[,,j])
}
Nj <- pro[j]*N
if ( regularize ) {
Sj <- Scale + Nj*temp$S[,,j]
Sj <- Sj / ( Nj + V + 1 + regHyperPar$psi )
} else {
Sj <- temp$S[,,j]
}
out <- switch(search,
"step-forw" = try(
mggm:::searchGGMStepwise_f(S = Sj, N = N, model = model, pro = Nj/N, start = START,
penalty = penalty, beta = beta,
regularize = regularize, regHyperPar = regHyperPar,
ctrlStep = ctrlStep, ctrlIcf = ctrlIcf, parallel = parallel,
verbose = FALSE,
occam = occam[[j]]),
silent = !ctrlEm$printMsg),
#
"step-back" = try(
mggm:::searchGGMStepwise_b(S = Sj, N = N, model = model, pro = Nj/N, start = START,
penalty = penalty, beta = beta,
regularize = regularize, regHyperPar = regHyperPar,
ctrlStep = ctrlStep, ctrlIcf = ctrlIcf, parallel = parallel,
verbose = FALSE,
occam = occam[[j]]),
silent = !ctrlEm$printMsg),
#
"ga" = try(
mggm:::searchGGMGA(S = Sj, N = N, model = model, pro = Nj/N, start = START,
penalty = penalty, beta = beta,
regularize = regularize, regHyperPar = regHyperPar,
ctrlGa = ctrlGa, ctrlIcf = ctrlIcf, parallel = parallel,
verbose = FALSE),
silent = !ctrlEm$printMsg)
)
if ( class(out) == "try-error" ) {
exitLoop <- TRUE
break
} else exitLoop <- FALSE
sigma[,,j] <- out$sigma
omega[,,j] <- out$omega
graph[,,j] <- out$graph
occam[[j]] <- out$occam   # keep the edges in the window for the next EM iteration
critOut[j] <- out$crit
} # for j in 1:K
out
#### E step ............................................
e <- estepmggm(data, t(mu), sigma, pro)
z <- e$z
loglik <- e$loglik
### loglikelihood.......................................
llk <- loglik             # BIC is computed using MAP estimates in loglikelihood
#
if ( regularize ) {
nu <- regHyperPar$psi
logPrior <- rep(NA, K)
for ( j in 1:K ) {
# inverse Wishart log density  --- MCMCpack
multGamma <- sum( lgamma((nu + 1 - 1:V)/2) )
lDenom <- multGamma + 0.5*nu*V*log(2) + 0.25*V*(V - 1)*log(pi)
cholS <- chol(sigma[,,j])
cholW <- cholScale
halflogdetS <- sum( log(diag(cholS)) )
halflogdetW <- sum( log(diag(cholW)) )
invS <- chol2inv( cholS )
exptrace <- sum(Scale * invS)
lNum <- nu*halflogdetW - (nu + V + 1) * halflogdetS - 0.5 * exptrace
logPrior[j] <- lNum - lDenom
}
loglik <- loglik + sum(logPrior)
}
nCov <- sum(graph)/2      # number of covariance parameters
penVal <- sum( vapply( 1:K, function(k) penalty(graph[,,k], beta = beta), numeric(1) ) )
loglikPen <- loglik + penVal
# update the Start......................................
# temp <- ifelse(sigma != 0, 1, 0)
# temp <- apply( temp, 3, function(a) replace(a, cbind(1:M, 1:M), 0) )
Start <- graph
firstIt <- FALSE
#### check
err <- abs(loglikPen - loglikPenPrev) / (1 + abs(loglikPen))
loglikPenPrev <- loglikPen
iter <- iter + 1
err
ctrlEm$printMsg
while ( crit ) {
#### M step ............................................
temp <- mclust::covw(data, z, normalize = FALSE)
dimnames(temp$S) <- list(varnames, varnames)
mu <- temp$mean
pro <- colMeans(z)
for ( j in 1:K ) {
if ( firstIt ) START <- NULL else {
START <- structure(Start[,,j], critOut = critOut[j], sigma = sigma[,,j])
}
Nj <- pro[j]*N
if ( regularize ) {
Sj <- Scale + Nj*temp$S[,,j]
Sj <- Sj / ( Nj + V + 1 + regHyperPar$psi )
} else {
Sj <- temp$S[,,j]
}
out <- switch(search,
"step-forw" = try(
mggm:::searchGGMStepwise_f(S = Sj, N = N, model = model, pro = Nj/N, start = START,
penalty = penalty, beta = beta,
regularize = regularize, regHyperPar = regHyperPar,
ctrlStep = ctrlStep, ctrlIcf = ctrlIcf, parallel = parallel,
verbose = FALSE,
occam = occam[[j]]),
silent = ctrlEm$printMsg),
#
"step-back" = try(
mggm:::searchGGMStepwise_b(S = Sj, N = N, model = model, pro = Nj/N, start = START,
penalty = penalty, beta = beta,
regularize = regularize, regHyperPar = regHyperPar,
ctrlStep = ctrlStep, ctrlIcf = ctrlIcf, parallel = parallel,
verbose = FALSE,
occam = occam[[j]]),
silent = !ctrlEm$printMsg),
#
"ga" = try(
mggm:::searchGGMGA(S = Sj, N = N, model = model, pro = Nj/N, start = START,
penalty = penalty, beta = beta,
regularize = regularize, regHyperPar = regHyperPar,
ctrlGa = ctrlGa, ctrlIcf = ctrlIcf, parallel = parallel,
verbose = FALSE),
silent = !ctrlEm$printMsg)
)
if ( class(out) == "try-error" ) {
exitLoop <- TRUE
break
} else exitLoop <- FALSE
sigma[,,j] <- out$sigma
omega[,,j] <- out$omega
graph[,,j] <- out$graph
occam[[j]] <- out$occam   # keep the edges in the window for the next EM iteration
critOut[j] <- out$crit
} # for j in 1:K
if ( exitLoop ) break
###.....................................................
#### E step ............................................
e <- estepmggm(data, t(mu), sigma, pro)
z <- e$z
loglik <- e$loglik
#
### OLD VERSION
# cholSigma <- array( apply(sigma, 3, chol), c(V,V,K) )
# e <- estepVVV(x, parameters = list(mean = mu, pro = pro,
#                                    variance = list(cholsigma = cholSigma))
#               )
###.....................................................
### loglikelihood.......................................
llk <- loglik             # BIC is computed using MAP estimates in loglikelihood
#
if ( regularize ) {
nu <- regHyperPar$psi
logPrior <- rep(NA, K)
for ( j in 1:K ) {
# inverse Wishart log density  --- MCMCpack
multGamma <- sum( lgamma((nu + 1 - 1:V)/2) )
lDenom <- multGamma + 0.5*nu*V*log(2) + 0.25*V*(V - 1)*log(pi)
cholS <- chol(sigma[,,j])
cholW <- cholScale
halflogdetS <- sum( log(diag(cholS)) )
halflogdetW <- sum( log(diag(cholW)) )
invS <- chol2inv( cholS )
exptrace <- sum(Scale * invS)
lNum <- nu*halflogdetW - (nu + V + 1) * halflogdetS - 0.5 * exptrace
logPrior[j] <- lNum - lDenom
}
loglik <- loglik + sum(logPrior)
}
nCov <- sum(graph)/2      # number of covariance parameters
penVal <- sum( vapply( 1:K, function(k) penalty(graph[,,k], beta = beta), numeric(1) ) )
loglikPen <- loglik + penVal
###.....................................................
# update the Start......................................
# temp <- ifelse(sigma != 0, 1, 0)
# temp <- apply( temp, 3, function(a) replace(a, cbind(1:M, 1:M), 0) )
Start <- graph
firstIt <- FALSE
#.......................................................
#### check
err <- abs(loglikPen - loglikPenPrev) / (1 + abs(loglikPen))
loglikPenPrev <- loglikPen
iter <- iter + 1
# use loading bar
crit <- ( err > tol & iter < itMax )
} # while
crit
err
graph
temp <- mclust::covw(data, z, normalize = FALSE)
dimnames(temp$S) <- list(varnames, varnames)
mu <- temp$mean
#
for ( j in 1:K ) {
Nj <- sum(z[,j])
if ( regularize ) {
Sj <- Scale + Nj*temp$S[,,j]
Sj <- Sj / ( Nj + V + 1 + regHyperPar$psi )
} else {
Sj <- temp$S[,,j]
}
tmp <- fitGGM( data = NULL, graph = graph[,,j], S = Sj, model = model, N = Nj,
ctrlIcf = ctrlIcf, regularize = regularize, regHyperPar = regHyperPar )
sigma[,,j] <- tmp$sigma
omega[,,j] <- tmp$omega
}
#
pro <- colMeans(z)
omega
sigma
library(mggm)
mod <- mixGGM(data, K = 3, model = "concentration")
mod
mod$parameters
mod <- mixGGM(data, K = 1:5, model = "concentration")
library(mggm)
?mixGGM
library(mclust)
?Mclust
library(mggm)
data(wine, package = "gclus")
data <- wine[,-5]
K <- 3
V <- ncol(data)
N <- nrow(data)
VAR <- var(data)*(N-1)/N
VAR/( K^(2/V) )
det(VAR)
det( VAR/( K^(2/V) ) )
VAR/det(VAR)^(1/V) * (0.001/K)^(1/V)
det( VAR/det(VAR)^(1/V) * (0.001/K)^(1/V) )
det( VAR/det(VAR)^(1/V)  )
VAR/( K^(2/V) )
det(VAR/( K^(2/V) ))
library(MASS)
V <- 20
N <- 100
mu <- rep(0, V)
sigma <- matrix(0.9, V,V)
diag(sigma) <- 1
x <- cbind( MASS::mvrnorm(N, mu, sigma),
MASS::mvrnorm(N, mu, sigma),
MASS::mvrnorm(N, mu, sigma) )
dim(x)
a <- searchGGM(x, model = "covariance",
ctrlStep = ctrlSTEP(occamAdd = 10, occamRem = 10))
a <- searchGGM(x, model = "covariance", verbose = TRUE,
ctrlStep = ctrlSTEP(occamAdd = 10, occamRem = 10))
a <- searchGGM(x, model = "covariance", verbose = TRUE, penalty = "ebic",
ctrlStep = ctrlSTEP(occamAdd = 10, occamRem = 10), parallel = TRUE)
library(MASS)
V <- 10
N <- 500
mu <- rep(0, V)
sigma <- matrix(0.9, V,V)
diag(sigma) <- 1
x <- cbind( MASS::mvrnorm(N, mu, sigma),
MASS::mvrnorm(N, mu, sigma),
MASS::mvrnorm(N, mu, sigma) )
a <- searchGGM(x, model = "covariance", verbose = TRUE, penalty = "ebic",
ctrlStep = ctrlSTEP(occamAdd = 5, occamRem = 5), parallel = TRUE)
a
plot(a, "adjacency")
V <- 10
N <- 200
mu <- rep(0, V)
sigma <- matrix(0.9, V,V)
diag(sigma) <- 1
x <- cbind( MASS::mvrnorm(N, mu, sigma),
MASS::mvrnorm(N, mu, sigma),
MASS::mvrnorm(N, mu, sigma) )
a <- searchGGM(x, model = "covariance", verbose = TRUE, penalty = "ebic",
ctrlStep = ctrlSTEP(occamAdd = 5, occamRem = 5), parallel = TRUE)
plot(a, "adjacency")
V <- 10
N <- 100
mu <- rep(0, V)
sigma <- matrix(0.9, V,V)
diag(sigma) <- 1
x <- cbind( MASS::mvrnorm(N, mu, sigma),
MASS::mvrnorm(N, mu, sigma),
MASS::mvrnorm(N, mu, sigma) )
a <- searchGGM(x, model = "covariance", verbose = TRUE, penalty = "ebic",
ctrlStep = ctrlSTEP(occamAdd = 5, occamRem = 5), parallel = TRUE)
plot(a, "adjacency")
library(MASS)
V <- 15
N <- 100
mu <- rep(0, V)
sigma <- matrix(0.9, V,V)
diag(sigma) <- 1
x <- cbind( MASS::mvrnorm(N, mu, sigma),
MASS::mvrnorm(N, mu, sigma),
MASS::mvrnorm(N, mu, sigma) )
a <- searchGGM(x, model = "covariance", penalty = "ebic",
ctrlStep = ctrlSTEP(occamAdd = 5, occamRem = 5))
library(mggm)
citation("mggm")
library(mclust)
?mclust
library(mggm)
?mixGGM
library(mggm)
?mggm
library(mggm)
citation("mggm")
?mggm
N <- 1000
V <- 20
dat <- matrix(NA, N, V)
dat[,1] <- rnorm(N)
for ( j in 2:V ) dat[,j] <- dat[,j-1] + rnorm(N, sd = 0.5)
mod4 <- searchGGM(data = dat, model = "concentration")        # recover the model
plot(mod4, what = "adjacency")
N <- 100
V <- 20
dat <- matrix(NA, N, V)
dat[,1] <- rnorm(N)
for ( j in 2:V ) dat[,j] <- dat[,j-1] + rnorm(N, sd = 0.5)
mod4 <- searchGGM(data = dat, model = "concentration")        # recover the model
plot(mod4, what = "adjacency")
N <- 100
V <- 20
dat <- matrix(NA, N, V)
dat[,1] <- rnorm(N)
for ( j in 2:V ) dat[,j] <- dat[,j-1] + rnorm(N, sd = 0.5)
mod4 <- searchGGM(data = dat, model = "concentration", penalty = "erdos")        # recover the model
plot(mod4, what = "adjacency")
N <- 100
V <- 20
dat <- matrix(NA, N, V)
dat[,1] <- rnorm(N)
for ( j in 2:V ) dat[,j] <- dat[,j-1] + rnorm(N, sd = 0.5)
mod4 <- searchGGM(data = dat, model = "concentration", penalty = "ebic")        # recover the model
plot(mod4, what = "adjacency")
library(mggm)
citation("mggm")
library(mggm)
?mggm
library(mggm)
?packageVersion
library(mggm)
library(mggm)
library(mggm)
library(mggm)
library(mixggm)
library(mixggm)
library(mixggm)
library(mixggm)
library(mixggm)
library(mixggm)
library(mixggm)
library(mixggm)
library(mixggm)
citation("mixggm")
